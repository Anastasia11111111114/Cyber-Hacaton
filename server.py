from fastapi import FastAPI, HTTPException
import httpx
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel

app = FastAPI()

class PromptRequest(BaseModel):
    prompt: str

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

OLLAMA_URL = "http://localhost:11434/api/generate"

def format_response(text: str) -> str:
    """–ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –±–µ–∑ –ª–∏—à–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å strip –∏ —Ç.–ø.)"""
    return text.strip()

@app.post("/generate")
async def generate_tasks(request: PromptRequest):
    try:
        async with httpx.AsyncClient(timeout=60.0) as client:
            system_prompt = """<|system|>
–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞–¥–∞—á. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞—Å—Ç —Ç–µ–±–µ —Ç–µ–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: "—Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å", "—É—á–µ–±–∞", "–æ—Ç–¥—ã—Ö" –∏ —Ç.–ø.).
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∑–∞–¥–∞—á–∏ –Ω–∞ –¥–µ–Ω—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–Å–¢–ö–û–ì–û HTML –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞.

üîß –§–æ—Ä–º–∞—Ç:
<ul class="schedule">
        <li class="time-block"> 
        <div>
    <h2>–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫</h2> 
        <div>
        </li>   
    <li class="time-block"> 
        <h3>–£—Ç—Ä–æ</h3>
    <ul>
      <li>
        <input type="checkbox" id="task1">
        <label for="task1">...(07:00‚Äì07:15)</label>
      </li>
      <li>
        <input type="checkbox" id="task2">
        <label for="task2">... (07:30‚Äì08:00)</label>
      </li>
    </ul>
  </li>
  <li class="time-block">
    <h3>–î–µ–Ω—å</h3>
    <ul>
      <li>
        <input type="checkbox" id="task3">
        <label for="task3">... (13:00‚Äì14:00)</label>
      </li>
    </ul>
  </li>
  <li class="time-block">
    <h3>–í–µ—á–µ—Ä</h3>
    <ul>
      <li>
        <input type="checkbox" id="task4">
        <label for="task4">–ü—Ä–æ–≥—É–ª–∫–∞ (19:00‚Äì19:30)</label>
      </li>
    </ul>
  </li>
</ul>

üìå –°—Ç—Ä–æ–≥–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ò—Å–ø–æ–ª—å–∑—É–π —Ä–æ–≤–Ω–æ —Ç–∞–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å `<ul class="schedule">` –∫–∞–∫ –∫–æ—Ä–Ω–µ–º.
- –í–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ `li.time-block` –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å `<h3>` –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π `<ul>`.
- –ö–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–Ω—É—Ç—Ä–∏ `<li>`, —Å `<input type="checkbox" id="taskN">` –∏ `<label for="taskN">...`.
- ID –∑–∞–¥–∞—á –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã (`task1`, `task2`, –∏ —Ç.–¥.).
- –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Å–∫–æ–±–∫–∞—Ö –ø–æ—Å–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è.
- –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –≤–Ω–µ `<ul class="schedule">`.
- –ù–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏—Ö –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –∏–ª–∏ `<br>`.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ HTML —Å–æ–≥–ª–∞—Å–Ω–æ —ç—Ç–æ–º—É —à–∞–±–ª–æ–Ω—É.
<|end|>
"""
            user_prompt = f"<|user|>–¢–µ–º–∞: {request.prompt}<|end|>\n<|assistant|>"

            response = await client.post(
                OLLAMA_URL,
                json={
                    "model": "phi3",
                    "prompt": system_prompt + user_prompt,
                    "stream": False,
                    "options": {
                        "temperature": 0.1,
                        "num_predict": 500,
                        "stop": ["<|end|>"]
                    }
                }
            )

            if response.status_code != 200:
                raise HTTPException(status_code=502, detail="–û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏")

            # Get raw response from model
            raw_response = response.json().get("response", "")

            # Remove common markdown fences
            raw_response = raw_response.replace("```html", "")
            raw_response = raw_response.replace("```", "")
            raw_response = raw_response.replace("~~~html", "")
            raw_response = raw_response.replace("~~~", "")

            return {"tasks": format_response(raw_response)}

    except httpx.TimeoutException:
        raise HTTPException(504, "–°–µ—Ä–≤–µ—Ä –º–æ–¥–µ–ª–∏ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
    except Exception as e:
        raise HTTPException(500, f"–û—à–∏–±–∫–∞: {str(e)}")
